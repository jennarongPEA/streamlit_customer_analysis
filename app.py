import streamlit as st
import pandas as pd
import plotly.express as px
import os
import io
from datetime import datetime

# ------------------ Page Config ------------------
apptitle = 'BB_customer_analysis'
st.set_page_config(page_title=apptitle, page_icon="‚ö°", layout="wide")
st.title("üìä Customer Risk Summary Dashboard")

file_path = os.path.join("data", "customer_risk_summary.csv")

try:
    df = pd.read_csv(file_path)
    df["‡∏Å‡∏ü‡∏ü."] = df["TRSG"].str[:3]

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (%) ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 1 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    df["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (%)"] = (df["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô"] * 100).round(1)
    df.drop(columns=["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô"], inplace=True)

    # ------------------ Sidebar ------------------
    


    with st.sidebar:
        st.image("assets/pea_logo.png", use_container_width=True)
        
        menu = st.sidebar.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤", ["üìä ‡∏™‡∏£‡∏∏‡∏õ Dashboard", "üîç ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏¢ CA"])

    
        st.markdown("## üó∫Ô∏è ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà")

        selected_gfo = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏ü‡∏ü.", options=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(df["‡∏Å‡∏ü‡∏ü."].unique()))
        if selected_gfo != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            filtered_trsg = df[df["‡∏Å‡∏ü‡∏ü."] == selected_gfo]["TRSG"].unique()
        else:
            filtered_trsg = df["TRSG"].unique()
        selected_trsg = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏ü‡∏™.", options=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(filtered_trsg))

        if selected_trsg != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            filtered_mru_options = df[df["TRSG"] == selected_trsg]["MRU"].unique()
        elif selected_gfo != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            filtered_mru_options = df[df["‡∏Å‡∏ü‡∏ü."] == selected_gfo]["MRU"].unique()
        else:
            filtered_mru_options = df["MRU"].unique()
        selected_mru = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ (MRU)", options=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(filtered_mru_options))

        st.markdown("## üìã ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
        selected_action_dropdown = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
            options=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(df["‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"].dropna().unique())
        )

        st.markdown("## ‚ö†Ô∏è ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á")
        risk_levels_all = sorted(df['‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á'].dropna().unique())
        selected_risk = []
        for level in risk_levels_all:
            if st.checkbox(f"‡∏£‡∏∞‡∏î‡∏±‡∏ö: {level}", value=True):
                selected_risk.append(level)

        st.markdown("## üîé ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°")
        selected_usage = st.multiselect(
            "‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤",
            options=sorted(df["‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤"].dropna().unique()),
            default=None
        )
        st.markdown("---")
        st.markdown("""
<div style='font-size: 13px; line-height: 1.6;'>
üìå <strong>‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÇ‡∏î‡∏¢</strong><br><br>
üìà <strong>‡∏Å‡∏≠‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏ü‡πâ‡∏≤<br>‡∏ù‡πà‡∏≤‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏á‡∏≤‡∏ô</strong><br><br>
üõ†Ô∏è <strong>‡∏Å‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤<br>‡∏ù‡πà‡∏≤‡∏¢‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</strong><br><br>
üü£ <strong>‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ ‡πÄ‡∏Ç‡∏ï 3 (‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏â‡∏µ‡∏¢‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠) ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤</strong>
</div>
""", unsafe_allow_html=True)
        
    # ------------------ Filtering ------------------
    filtered_df = df.copy()
    if selected_gfo != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df = filtered_df[filtered_df["‡∏Å‡∏ü‡∏ü."] == selected_gfo]
    if selected_trsg != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df = filtered_df[filtered_df["TRSG"] == selected_trsg]
    if selected_mru != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df = filtered_df[filtered_df["MRU"] == selected_mru]
    if selected_action_dropdown != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df = filtered_df[filtered_df["‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"] == selected_action_dropdown]
    if selected_risk:
        filtered_df = filtered_df[filtered_df["‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"].isin(selected_risk)]
    if selected_usage:
        filtered_df = filtered_df[filtered_df["‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤"].isin(selected_usage)]

    # ------------------ Summary ------------------
    st.markdown("### üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î (Summary Metrics)")

    total_customers = len(filtered_df)
    analysis_counts = filtered_df["‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"].value_counts().to_dict()
    risk_counts = filtered_df["‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"].value_counts().to_dict()

    st.metric("üî¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤", total_customers)

    col_analysis = st.columns(len(analysis_counts))
    for i, (label, count) in enumerate(analysis_counts.items()):
        col_analysis[i].metric(f"üìò {label}", count)

    col_risk = st.columns(len(risk_counts))
    for i, (level, count) in enumerate(risk_counts.items()):
        col_risk[i].metric(f"‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {level}", count)

    # ------------------ Bar Chart by ‡∏Å‡∏ü‡∏ü. ------------------
    st.markdown("### üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (Grouped by ‡∏Å‡∏ü‡∏ü.)")
    grouped_gfo = filtered_df.groupby(["‡∏Å‡∏ü‡∏ü.", "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"]).size().reset_index(name='count')
    fig_gfo = px.bar(
        grouped_gfo,
        x='‡∏Å‡∏ü‡∏ü.', y='count', color='‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
        barmode='stack', text_auto=True,
        title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (‡∏Å‡∏ü‡∏ü.)"
    )
    st.plotly_chart(fig_gfo, use_container_width=True)

    # ------------------ Bar Chart by ‡∏Å‡∏ü‡∏™. ------------------
    st.markdown("### üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (Grouped by ‡∏Å‡∏ü‡∏™.)")
    grouped_trsg = filtered_df.groupby(["TRSG", "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"]).size().reset_index(name='count')
    grouped_trsg = grouped_trsg.sort_values(by="count", ascending=False)
    fig_trsg = px.bar(
        grouped_trsg,
        y='TRSG', x='count', color='‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
        orientation='h', text_auto=True,
        title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (‡∏Å‡∏ü‡∏™.)"
    )
    st.plotly_chart(fig_trsg, use_container_width=True)

    # ------------------ Bar Chart: ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ ------------------
    st.markdown("### üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")
    action_df = filtered_df["‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"].value_counts().reset_index()
    action_df.columns = ["‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]
    fig_action = px.bar(
        action_df,
        x="‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
        y="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô",
        text_auto=True,
        color="‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
        title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
    )
    st.plotly_chart(fig_action, use_container_width=True)

    # ------------------ 3D Scatter Plot ------------------
    st.markdown("### üìà ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö 3 ‡∏°‡∏¥‡∏ï‡∏¥: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô vs ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô vs ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç CA")
    fig_scatter_3d = px.scatter_3d(
        filtered_df,
        x="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (%)",
        y="num_valid_months",
        z="CA",
        color="‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
        hover_data=["‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", "‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤"],
        title="‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ 3 ‡∏°‡∏¥‡∏ï‡∏¥: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (%) / ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô / CA",
        opacity=0.7
    )
    st.plotly_chart(fig_scatter_3d, use_container_width=True)

    # ------------------ Pivot Table ------------------
    st.markdown("### üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Pivot")
    pivot = pd.pivot_table(
        filtered_df,
        index='‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á',
        columns='‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
        values='CA',
        aggfunc='count',
        fill_value=0
    )
    st.dataframe(pivot, use_container_width=True)

    # ------------------ Data Preview ------------------
    st.markdown("### üëÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Preview)")
    col_order = ['‡∏Å‡∏ü‡∏ü.', 'TRSG', 'MRU'] + [c for c in filtered_df.columns if c not in ['‡∏Å‡∏ü‡∏ü.', 'TRSG', 'MRU']]
    styled_df = filtered_df[col_order].head(10).style.set_properties(**{'text-align': 'left'}).apply(
        lambda x: ['background-color: #565656; color: white' if i % 2 == 0 else '' for i in range(len(x))], axis=0
    )
    st.dataframe(styled_df, use_container_width=True)

    # ------------------ Download ------------------
    st.markdown("### üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Excel)")
    towrite = io.BytesIO()
    filtered_df.to_excel(towrite, index=False, sheet_name='Filtered Data')
    towrite.seek(0)
    st.download_button(
        label="üì• Download Excel",
        data=towrite,
        file_name=f"customer_filtered_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

except FileNotFoundError:
    st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file_path}")